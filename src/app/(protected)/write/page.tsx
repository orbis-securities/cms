"use client";

import { useState, useCallback, useRef, useEffect, Suspense } from 'react';
import { useSearchParams } from 'next/navigation';
import Link from 'next/link';
import AdvancedNovelEditor, { AdvancedNovelEditorRef } from '@/components/editor/AdvancedNovelEditor';
import { uploadImageToStorage, compressImage } from '@/lib/firebase/storage';
import { savePostToFirestore, getBlogSettings, getPostById, updatePostInFirestore, changePostCategory, getAllBlogs } from '@/lib/firebase/posts';
import { getTemplateById, getTemplatesByBlog, Template } from '@/lib/firebase/templates';
import { Timestamp } from 'firebase/firestore';
import {
  PenTool,
  Image as ImageIcon,
  Settings,
  Eye,
  Save,
  Send,
  Sparkles,
  Upload,
  X,
  Loader2,
  ArrowLeft,
  FileText
} from 'lucide-react';
import { toast, Toaster } from 'sonner';
import SpellCheckPanel from '@/components/editor/SpellCheckPanel';
import { inlineStyles } from '@/lib/utils/htmlStyleInliner';

function WritePageContent() {
  const searchParams = useSearchParams();
  const editPostId = searchParams.get('id');
  const editCategory = searchParams.get('category');
  const editBlogId = searchParams.get('blog');
  const templateId = searchParams.get('template');
  const isEditMode = !!(editPostId && editCategory && editBlogId);

  const [postTitle, setPostTitle] = useState('');
  const [postContent, setPostContent] = useState('');
  const [isPreview, setIsPreview] = useState(false);
  const [uploadedImages, setUploadedImages] = useState<{url: string, name: string}[]>([]);
  const [isImageUploading, setIsImageUploading] = useState(false);
  const [dragActive, setDragActive] = useState(false);
  const [isPublishing, setIsPublishing] = useState(false);
  const [isSaving, setIsSaving] = useState(false);
  const [selectedBlog, setSelectedBlog] = useState(editBlogId || '');
  const [category, setCategory] = useState(editCategory || '');
  const [originalCategory, setOriginalCategory] = useState(editCategory || '');
  const [tags, setTags] = useState('');
  const [availableCategories, setAvailableCategories] = useState<string[]>([]);
  const [availableBlogs, setAvailableBlogs] = useState<{ blogId: string, displayName: string }[]>([]);
  const [metaTitle, setMetaTitle] = useState('');
  const [metaDescription, setMetaDescription] = useState('');
  const [keywords, setKeywords] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [currentPostId, setCurrentPostId] = useState(editPostId || '');
  const [showPublishedPreview, setShowPublishedPreview] = useState(false);
  const [publishedPostUrl, setPublishedPostUrl] = useState('');
  const [showSpellCheck, setShowSpellCheck] = useState(false);
  const [featuredImage, setFeaturedImage] = useState('');
  const [showTemplateModal, setShowTemplateModal] = useState(false);
  const [availableTemplates, setAvailableTemplates] = useState<Template[]>([]);
  const [isLoadingTemplates, setIsLoadingTemplates] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const editorRef = useRef<AdvancedNovelEditorRef>(null);
  const templateLoadedRef = useRef(false);

  // Î∏îÎ°úÍ∑∏ Î™©Î°ù Î°úÎìú
  useEffect(() => {
    console.log('üîÑ Î∏îÎ°úÍ∑∏ Î™©Î°ù Î°úÎìú ÏãúÏûë');
    const loadBlogs = async () => {
      try {
        console.log('üì° getAllBlogs Ìò∏Ï∂ú Ï§ë...');
        const blogs = await getAllBlogs();
        console.log('üìä Î∂àÎü¨Ïò® Î∏îÎ°úÍ∑∏Îì§:', blogs);
        setAvailableBlogs(blogs);
      } catch (error) {
        console.error('Î∏îÎ°úÍ∑∏ Î™©Î°ù Î°úÎìú Ïã§Ìå®:', error);
      }
    };

    loadBlogs();
  }, []);

  // ÏàòÏ†ï Î™®ÎìúÏùº Îïå Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadPostForEdit = async () => {
      console.log('üîÑ ÏàòÏ†ï Î™®Îìú ÌôïÏù∏:', { isEditMode, editBlogId, editCategory, editPostId });

      if (isEditMode && editBlogId && editCategory && editPostId) {
        console.log('üöÄ Ìè¨Ïä§Ìä∏ Î°úÎìú ÏãúÏûë');
        setIsLoading(true);
        try {
          const post = await getPostById(editBlogId, editPostId);
          if (post) {
            console.log('üìù Ìè¨Ïä§Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏÑ§Ï†ï Ï§ë...');
            setPostTitle(post.title);
            setPostContent(post.content);
            setTags(post.tags?.join(', ') || '');
            setMetaTitle(post.seo?.metaTitle || '');
            setMetaDescription(post.seo?.metaDescription || '');
            setKeywords(post.seo?.keywords?.join(', ') || '');
            setFeaturedImage(post.featuredImage || '');
            console.log('‚úÖ ÏàòÏ†ïÌï† Ìè¨Ïä§Ìä∏ Î°úÎìú ÏôÑÎ£å:', post.title);
          } else {
            console.warn('‚ö†Ô∏è Ìè¨Ïä§Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå');
            toast.error('Ìè¨Ïä§Ìä∏Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
          }
        } catch (error) {
          console.error('‚ùå Ìè¨Ïä§Ìä∏ Î°úÎìú Ïã§Ìå®:', error);
          toast.error('Ìè¨Ïä§Ìä∏Î•º Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        } finally {
          setIsLoading(false);
        }
      }
    };

    loadPostForEdit();
  }, [isEditMode, editBlogId, editCategory, editPostId]);

  // ÌÖúÌîåÎ¶ø Î°úÎìú
  useEffect(() => {
    const loadTemplate = async () => {
      if (templateId && !isEditMode && !templateLoadedRef.current) {
        console.log('üîÑ ÌÖúÌîåÎ¶ø Î°úÎìú ÏãúÏûë:', templateId);
        templateLoadedRef.current = true;
        setIsLoading(true);
        try {
          const template = await getTemplateById('axi', templateId);
          if (template) {
            setPostContent(template.content);
            toast.success(`"${template.title}" ÌÖúÌîåÎ¶øÏù¥ Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.`, { position: 'top-center'});
          } else {
            console.warn('‚ö†Ô∏è ÌÖúÌîåÎ¶øÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå');
            toast.error('ÌÖúÌîåÎ¶øÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
          }
        } catch (error) {
          console.error('‚ùå ÌÖúÌîåÎ¶ø Î°úÎìú Ïã§Ìå®:', error);
          toast.error('ÌÖúÌîåÎ¶øÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        } finally {
          setIsLoading(false);
        }
      }
    };

    loadTemplate();
  }, [templateId, isEditMode]);

  // Î∏îÎ°úÍ∑∏ ÏÑ†ÌÉù Ïãú Ïπ¥ÌÖåÍ≥†Î¶¨ Î∂àÎü¨Ïò§Í∏∞
  useEffect(() => {
    const loadBlogSettings = async () => {
      if (selectedBlog) {
        try {
          const settings = await getBlogSettings(selectedBlog);
          if (settings) {
            setAvailableCategories(settings.categories);
            // ÏàòÏ†ï Î™®ÎìúÍ∞Ä ÏïÑÎãê ÎïåÎßå Ï≤´ Î≤àÏß∏ Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Í∏∞Î≥∏Í∞íÏúºÎ°ú ÏÑ§Ï†ï
            if (settings.categories.length > 0 && !category && !isEditMode) {
              setCategory(settings.categories[0]);
            }
          }
        } catch (error) {
          console.error('Î∏îÎ°úÍ∑∏ ÏÑ§Ï†ï Î°úÎìú Ïã§Ìå®:', error);
        }
      } else {
        // Î∏îÎ°úÍ∑∏ ÏÑ†ÌÉù Ìï¥Ï†ú Ïãú Ï¥àÍ∏∞Ìôî
        setAvailableCategories([]);
        if (!isEditMode) {
          setCategory('');
        }
      }
    };

    loadBlogSettings();
  }, [selectedBlog, isEditMode, category]);

  // Ï†ÑÏ≤¥ ÌéòÏù¥ÏßÄ Í∏∞Î≥∏ ÎìúÎûòÍ∑∏ Î∞©ÏßÄ (Îã®, Ïö∞Î¶¨ ÏóÖÎ°úÎìú ÏòÅÏó≠Í≥º ÏóêÎîîÌÑ∞Îäî Ï†úÏô∏)
  useEffect(() => {
    const handlePageDragOver = (e: DragEvent) => {
      // Ïö∞Î¶¨ ÏóÖÎ°úÎìú ÏòÅÏó≠Ïù¥ÎÇò ÏóêÎîîÌÑ∞Í∞Ä ÏïÑÎãå Í≥≥ÏóêÏÑúÎßå Î∞©ÏßÄ
      const target = e.target as HTMLElement;
      if (!target.closest('[data-upload-area]') && !target.closest('.ProseMirror')) {
        e.preventDefault();
      }
    };
    const handlePageDrop = (e: DragEvent) => {
      // Ïö∞Î¶¨ ÏóÖÎ°úÎìú ÏòÅÏó≠Ïù¥ÎÇò ÏóêÎîîÌÑ∞Í∞Ä ÏïÑÎãå Í≥≥ÏóêÏÑúÎßå Î∞©ÏßÄ
      const target = e.target as HTMLElement;
      if (!target.closest('[data-upload-area]') && !target.closest('.ProseMirror')) {
        e.preventDefault();
      }
    };

    document.addEventListener('dragover', handlePageDragOver);
    document.addEventListener('drop', handlePageDrop);

    return () => {
      document.removeEventListener('dragover', handlePageDragOver);
      document.removeEventListener('drop', handlePageDrop);
    };
  }, []);

  const handleSave = (content: string) => {
    // ÏûêÎèô Ï†ÄÏû• ÎπÑÌôúÏÑ±Ìôî (ÏàòÎèôÏúºÎ°úÎßå Ï†ÄÏû•)
    setPostContent(content);
  };

  // HTMLÏóêÏÑú poll Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïó¨Îü¨ Í∞ú)
  const extractPollsDataFromHTML = (html: string) => {
    const parser = new DOMParser();
    const doc = parser.parseFromString(html, 'text/html');
    const pollElements = doc.querySelectorAll('[data-type="poll"]');

    console.log("pollElements Í∞úÏàò:", pollElements.length);

    if (pollElements.length === 0) {
      return [];
    }

    const polls: Array<{
      pollId: string;
      question: string;
      options: { text: string; votes: number }[];
      allowMultiple: boolean;
      totalVotes: number;
    }> = [];

    pollElements.forEach((pollElement) => {
      const pollId = pollElement.getAttribute('data-poll-id') || '';
      const question = pollElement.getAttribute('data-question') || '';
      const optionsStr = pollElement.getAttribute('data-options');
      const allowMultiple = pollElement.getAttribute('data-allow-multiple') === 'true';

      let options: { text: string; votes: number }[] = [];
      try {
        const parsed = optionsStr ? JSON.parse(optionsStr) : [];
        // PollExtensionÏóêÏÑú string[] ÌòïÏãùÏúºÎ°ú Ï†ÄÏû•ÎêòÎØÄÎ°ú, { text, votes } ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
        options = parsed.map((opt: string | { text: string; votes: number }) => {
          if (typeof opt === 'string') {
            return { text: opt, votes: 0 };
          }
          return opt;
        });
      } catch (error) {
        console.error('Poll ÏòµÏÖò ÌååÏã± Ïã§Ìå®:', error);
        options = [];
      }

      // ÏÉàÎ°ú Îì±Î°ùÎêòÎäî pollÏùÄ Ìï≠ÏÉÅ totalVotes = 0ÏúºÎ°ú Ï¥àÍ∏∞Ìôî
      const totalVotes = 0;

      if (pollId) {
        polls.push({
          pollId,
          question,
          options,
          allowMultiple,
          totalVotes
        });
      }
    });

    console.log("Ï∂îÏ∂úÎêú polls:", polls);
    return polls;
  };

  const handleSaveAsDraft = async () => {
    if (!postTitle.trim()) {
      toast.info('Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }

    // ÏóêÎîîÌÑ∞ÏóêÏÑú ÏµúÏã† ÎÇ¥Ïö© Í∞ÄÏ†∏Ïò§Í∏∞
    const editorContent = editorRef.current?.getHTML?.() || postContent;

    if (!editorContent.trim() || editorContent === '<p></p>') {
      toast.info('ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }
    if (!selectedBlog.trim()) {
      toast.info('Î∏îÎ°úÍ∑∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }
    if (!category.trim()) {
      toast.info('Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }
    if (!featuredImage.trim()) {
      toast.info('ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }

    setIsSaving(true);
    try {
      if (currentPostId) {
        // ÏàòÏ†ï Î™®Îìú: ÏóÖÎç∞Ïù¥Ìä∏
        console.log('üíæ Ìè¨Ïä§Ìä∏ ÏàòÏ†ï Ï†ÄÏû• ÏãúÏûë:', postTitle);

        // Ïä§ÌÉÄÏùº Ïù∏ÎùºÏù∏Ìôî (ÌÅ¥ÎûòÏä§ Í∏∞Î∞ò Ïä§ÌÉÄÏùºÏùÑ Ïù∏ÎùºÏù∏ÏúºÎ°ú Î≥ÄÌôò)
        const inlinedContent = inlineStyles(editorContent);

        // poll Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïó¨Îü¨ Í∞ú)
        const pollsData = extractPollsDataFromHTML(inlinedContent);

        await updatePostInFirestore(selectedBlog, currentPostId, {
          title: postTitle,
          content: inlinedContent || '<p>ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî...</p>',
          categories: [category],
          tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
          status: 'draft',
          featuredImage: featuredImage,
          seo: {
            metaTitle: metaTitle || postTitle,
            metaDescription: metaDescription,
            keywords: keywords.split(',').map(keyword => keyword.trim()).filter(Boolean),
          },
          ...(pollsData.length > 0 && { polls: pollsData })
        });

        toast.success('Ìè¨Ïä§Ìä∏Í∞Ä ÏàòÏ†ïÎêòÏóàÏäµÎãàÎã§! üìù');
      } else {
        // ÏÉà Í∏Ä Î™®Îìú: ÏÉùÏÑ±
        console.log('üíæ Ìè¨Ïä§Ìä∏ Ï¥àÏïà Ï†ÄÏû• ÏãúÏûë:', postTitle);

        // Ïä§ÌÉÄÏùº Ïù∏ÎùºÏù∏Ìôî (ÌÅ¥ÎûòÏä§ Í∏∞Î∞ò Ïä§ÌÉÄÏùºÏùÑ Ïù∏ÎùºÏù∏ÏúºÎ°ú Î≥ÄÌôò)
        const inlinedContent = inlineStyles(editorContent);

        // poll Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïó¨Îü¨ Í∞ú)
        const pollsData = extractPollsDataFromHTML(inlinedContent);

        const postId = await savePostToFirestore(
          postTitle,
          inlinedContent || '<p>ÎÇ¥Ïö©ÏùÑ ÏûëÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî...</p>',
          selectedBlog,
          {
            category,
            tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
            metaTitle: metaTitle || postTitle,
            metaDescription: metaDescription,
            keywords: keywords.split(',').map(keyword => keyword.trim()).filter(Boolean),
            status: 'draft',
            featuredImage: featuredImage
          },
          pollsData
        );

        console.log('‚úÖ Ï¥àÏïà Ï†ÄÏû• ÏôÑÎ£å:', postId);
        setCurrentPostId(postId); // Ï†ÄÏû• ÌõÑ ÏàòÏ†ï Î™®ÎìúÎ°ú Ï†ÑÌôò
        setOriginalCategory(category);
        toast.success(`Ï¥àÏïàÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§! üìù\nPost ID: ${postId}`);
      }
    } catch (error) {
      console.error('‚ùå Ï†ÄÏû• Ïã§Ìå®:', error);
      toast.error(`Ï†ÄÏû•Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsSaving(false);
    }
  };

  const handlePublish = async () => {
    if (!postTitle.trim()) {
      toast.info('Ï†úÎ™©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }

    // ÏóêÎîîÌÑ∞ÏóêÏÑú ÏµúÏã† ÎÇ¥Ïö© Í∞ÄÏ†∏Ïò§Í∏∞
    const editorContent = editorRef.current?.getHTML?.() || postContent;

    if (!editorContent.trim() || editorContent === '<p></p>') {
      toast.info('ÎÇ¥Ïö©ÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }
    if (!selectedBlog.trim()) {
      toast.info('Î∏îÎ°úÍ∑∏Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }
    if (!category.trim()) {
      toast.info('Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }
    if (!featuredImage.trim()) {
      toast.info('ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÎ•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî', { position: 'top-center' });
      return;
    }

    // Ïä§ÌÉÄÏùº Ïù∏ÎùºÏù∏Ìôî (ÌÅ¥ÎûòÏä§ Í∏∞Î∞ò Ïä§ÌÉÄÏùºÏùÑ Ïù∏ÎùºÏù∏ÏúºÎ°ú Î≥ÄÌôò)
    const inlinedContent = inlineStyles(editorContent);

    setIsPublishing(true);
    try {
      if (currentPostId) {
        // ÏàòÏ†ï Î™®Îìú: ÏóÖÎç∞Ïù¥Ìä∏
        console.log('üöÄ Ìè¨Ïä§Ìä∏ ÏàòÏ†ï Î∞úÌñâ ÏãúÏûë:', postTitle);

        // poll Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïó¨Îü¨ Í∞ú)
        const pollsData = extractPollsDataFromHTML(inlinedContent);

        await updatePostInFirestore(selectedBlog, currentPostId, {
          title: postTitle,
          content: inlinedContent,
          categories: [category],
          tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
          status: 'published',
          publishedAt: Timestamp.now(),
          featuredImage: featuredImage,
          seo: {
            metaTitle: metaTitle || postTitle,
            metaDescription: metaDescription,
            keywords: keywords.split(',').map(keyword => keyword.trim()).filter(Boolean),
          },
          ...(pollsData.length > 0 && { polls: pollsData })
        });

        // axi Î∏îÎ°úÍ∑∏Ïùº ÎïåÎßå ÎØ∏Î¶¨Î≥¥Í∏∞ ÌëúÏãú
        if (selectedBlog === 'axi') {
          const previewUrl = 'https://mmtblog.vercel.app/posts/1';
          setPublishedPostUrl(previewUrl);
          setShowPublishedPreview(true);
        }

        toast.success('Ìè¨Ïä§Ìä∏Í∞Ä ÏàòÏ†ï Î∞úÌñâÎêòÏóàÏäµÎãàÎã§! üéâ');
      } else {
        // ÏÉà Í∏Ä Î™®Îìú: ÏÉùÏÑ±
        console.log('üöÄ Ìè¨Ïä§Ìä∏ Î∞úÌñâ ÏãúÏûë:', postTitle);

        // poll Îç∞Ïù¥ÌÑ∞ Ï∂îÏ∂ú (Ïó¨Îü¨ Í∞ú)
        const pollsData = extractPollsDataFromHTML(inlinedContent);

        const postId = await savePostToFirestore(
          postTitle,
          inlinedContent,
          selectedBlog,
          {
            category,
            tags: tags.split(',').map(tag => tag.trim()).filter(Boolean),
            metaTitle: metaTitle || postTitle,
            metaDescription: metaDescription,
            keywords: keywords.split(',').map(keyword => keyword.trim()).filter(Boolean),
            status: 'published',
            featuredImage: featuredImage
          },
          pollsData
        );

        console.log('‚úÖ Ìè¨Ïä§Ìä∏ Î∞úÌñâ ÏôÑÎ£å:', postId);
        setCurrentPostId(postId); // Ï†ÄÏû• ÌõÑ ÏàòÏ†ï Î™®ÎìúÎ°ú Ï†ÑÌôò
        setOriginalCategory(category);

        // axi Î∏îÎ°úÍ∑∏Ïùº ÎïåÎßå ÎØ∏Î¶¨Î≥¥Í∏∞ ÌëúÏãú
        if (selectedBlog === 'axi') {
          const previewUrl = 'https://mmtblog.vercel.app/posts/1';
          setPublishedPostUrl(previewUrl);
          setShowPublishedPreview(true);
        }

        toast.success(`Ìè¨Ïä§Ìä∏Í∞Ä Î∞úÌñâÎêòÏóàÏäµÎãàÎã§! üéâ\nPost ID: ${postId}`);
      }
    } catch (error) {
      console.error('‚ùå Ìè¨Ïä§Ìä∏ Î∞úÌñâ Ïã§Ìå®:', error);
      toast.error(`Ìè¨Ïä§Ìä∏ Î∞úÌñâÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§: ${error instanceof Error ? error.message : String(error)}`);
    } finally {
      setIsPublishing(false);
    }
  };

  const handleImageUpload = useCallback(async (file: File) => {
    setIsImageUploading(true);
    try {
      console.log('üìÅ ÏÇ¨Ïù¥ÎìúÎ∞î Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏãúÏûë:', file.name, file.type, file.size);

      // Ïù¥ÎØ∏ÏßÄ ÌååÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
      if (!file.type.startsWith('image/')) {
        throw new Error('Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
      }

      const compressedFile = await compressImage(file, 1200, 0.8);
      console.log('üóúÔ∏è Ïù¥ÎØ∏ÏßÄ ÏïïÏ∂ï ÏôÑÎ£å:', compressedFile.size);

      const url = await uploadImageToStorage(compressedFile, 'demo-blog');
      console.log('‚úÖ Firebase ÏóÖÎ°úÎìú ÏôÑÎ£å:', url);

      // ÏóÖÎ°úÎìúÎêú Ïù¥ÎØ∏ÏßÄÎ•º Î™©Î°ùÏóê Ï∂îÍ∞Ä
      setUploadedImages(prev => [...prev, { url, name: file.name }]);
      return url;
    } catch (error) {
      console.error('‚ùå ÏÇ¨Ïù¥ÎìúÎ∞î Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú ÏóêÎü¨:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      toast.error(`Ïù¥ÎØ∏ÏßÄ ÏóÖÎ°úÎìú Ïã§Ìå®: ${errorMessage}`);
      throw error;
    } finally {
      setIsImageUploading(false);
    }
  }, []);

  const handleFileSelect = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      await handleImageUpload(files[0]);
    }
    // input Í∞í Ï¥àÍ∏∞Ìôî
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleDragEnter = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('üéØ ÎìúÎûòÍ∑∏ ÏßÑÏûÖ');
    setDragActive(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    // currentTargetÏùÑ Î≤óÏñ¥ÎÇ† ÎïåÎßå ÎπÑÌôúÏÑ±Ìôî
    if (!e.currentTarget.contains(e.relatedTarget as Node)) {
      console.log('üö™ ÎìúÎûòÍ∑∏ Ï¢ÖÎ£å');
      setDragActive(false);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('üîÑ ÎìúÎûòÍ∑∏ Ïò§Î≤Ñ');
    // ÎìúÎ°≠ÏùÑ ÌóàÏö©ÌïòÍ∏∞ ÏúÑÌï¥ ÌïÑÏàò
    if (e.dataTransfer) {
      e.dataTransfer.dropEffect = 'copy';
    }
  };

  const handleDrop = async (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    console.log('üì• ÎìúÎ°≠ Ïù¥Î≤§Ìä∏ Î∞úÏÉù');
    setDragActive(false);

    const files = Array.from(e.dataTransfer.files);
    const items = Array.from(e.dataTransfer.items);

    console.log('üìÅ ÎìúÎ°≠Îêú ÌååÏùºÎì§:', files.map(f => f.name));
    console.log('üîó ÎìúÎ°≠Îêú ÏïÑÏù¥ÌÖúÎì§:', items.map(i => i.type));

    // ÌååÏùºÏù¥ ÏûàÎäî Í≤ΩÏö∞ (Ïã§Ï†ú ÌååÏùº ÎìúÎ°≠)
    if (files.length > 0) {
      const file = files[0];
      if (file.type.startsWith('image/')) {
        console.log('‚úÖ Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÌôïÏù∏, ÏóÖÎ°úÎìú ÏãúÏûë');
        await handleImageUpload(file);
      } else {
        console.log('‚ùå Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏù¥ ÏïÑÎãò:', file.type);
        toast.error('Ïù¥ÎØ∏ÏßÄ ÌååÏùºÎßå ÏóÖÎ°úÎìú Í∞ÄÎä•Ìï©ÎãàÎã§.');
      }
      return;
    }
    
    // URLÏù¥ÎÇò ÌÖçÏä§Ìä∏Í∞Ä ÎìúÎ°≠Îêú Í≤ΩÏö∞ (Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïù¥ÎØ∏ÏßÄ ÎìúÎûòÍ∑∏)
    for (const item of items) {
      if (item.type === 'text/plain' || item.type === 'text/uri-list') {
        const text = e.dataTransfer.getData(item.type);
        console.log('üîó ÎìúÎ°≠Îêú ÌÖçÏä§Ìä∏/URL:', text);
        
        if (text.startsWith('file://')) {
          toast.error('Î°úÏª¨ ÌååÏùº Í≤ΩÎ°úÎäî ÏßÄÏõêÎêòÏßÄ ÏïäÏäµÎãàÎã§. ÌååÏùºÏùÑ ÏßÅÏ†ë ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò ÌååÏùº ÏÑ†ÌÉùÏùÑ Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.');
          return;
        }
        
        if (text.match(/\.(jpg|jpeg|png|gif|webp)$/i)) {
          console.log('üñºÔ∏è Ïù¥ÎØ∏ÏßÄ URL Í∞êÏßÄ, ÏÇΩÏûÖ ÏãúÎèÑ');
          // Ïô∏Î∂Ä Ïù¥ÎØ∏ÏßÄ URLÏùÑ ÏóêÎîîÌÑ∞Ïóê ÏßÅÏ†ë ÏÇΩÏûÖ
          if (editorRef.current) {
            (editorRef.current as any).chain().focus().setImage({ 
              src: text, 
              width: 400, 
              height: 300, 
              align: 'center' 
            }).run();
            toast.success('Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÇΩÏûÖÎêòÏóàÏäµÎãàÎã§.');
            return;
          }
        }
      }
    }
    
    toast.error('ÏßÄÏõêÎêòÏßÄ ÏïäÎäî ÌååÏùº ÌòïÏãùÏûÖÎãàÎã§. Ïù¥ÎØ∏ÏßÄ ÌååÏùºÏùÑ ÏßÅÏ†ë ÎìúÎûòÍ∑∏ÌïòÍ±∞ÎÇò ÌååÏùº ÏÑ†ÌÉùÏùÑ Ïù¥Ïö©Ìï¥Ï£ºÏÑ∏Ïöî.');
  };

  const insertImageToEditor = (imageUrl: string) => {
    if (editorRef.current) {
      (editorRef.current as any).chain().focus().setImage({ src: imageUrl, width: 400, height: 300 }).run();
      toast.success('Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóêÎîîÌÑ∞Ïóê ÏÇΩÏûÖÎêòÏóàÏäµÎãàÎã§.');
    } else {
      toast.error('ÏóêÎîîÌÑ∞Í∞Ä Ï§ÄÎπÑÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
    }
  };

  const removeImage = (indexToRemove: number) => {
    setUploadedImages(prev => prev.filter((_, index) => index !== indexToRemove));
    toast.success('Ïù¥ÎØ∏ÏßÄÍ∞Ä Ï†úÍ±∞ÎêòÏóàÏäµÎãàÎã§.');
  };

  const handleSetFeatured = (imageUrl: string) => {
    setFeaturedImage(imageUrl);
    toast.success('ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÑ§Ï†ïÎêòÏóàÏäµÎãàÎã§.');
  };

  // ÌÖúÌîåÎ¶ø Î™®Îã¨ Ïó¥Í∏∞ Ïãú ÌÖúÌîåÎ¶ø Î™©Î°ù Î°úÎìú
  const handleOpenTemplateModal = async () => {
    setShowTemplateModal(true);
    setIsLoadingTemplates(true);
    try {
      const templates = await getTemplatesByBlog('axi');
      setAvailableTemplates(templates);
    } catch (error) {
      console.error('ÌÖúÌîåÎ¶ø Î°úÎìú Ïã§Ìå®:', error);
      toast.error('ÌÖúÌîåÎ¶øÏùÑ Î∂àÎü¨Ïò§ÎäîÎç∞ Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoadingTemplates(false);
    }
  };

  // ÌÖúÌîåÎ¶ø Ï†ÅÏö©
  const handleApplyTemplate = async (template: Template) => {
    const hasContent = postContent && postContent !== '<p></p>';

    if (hasContent) {
      const confirmed = window.confirm(
        `"${template.title}" ÌÖúÌîåÎ¶øÏùÑ Ï†ÅÏö©ÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÌòÑÏû¨ ÏûëÏÑ± Ï§ëÏù∏ Î≥∏Î¨∏ ÎÇ¥Ïö©Ïù¥ ÏÇ≠Ï†úÎêòÍ≥† ÌÖúÌîåÎ¶ø ÎÇ¥Ïö©ÏúºÎ°ú ÎçÆÏñ¥Ïì∞Í∏∞Îê©ÎãàÎã§.`
      );

      if (!confirmed) {
        return;
      }
    }

    // ÌÖúÌîåÎ¶ø Ï†ÅÏö© (Ï†úÎ™©ÏùÄ Ïú†ÏßÄ, Î≥∏Î¨∏Îßå ÍµêÏ≤¥)
    setPostContent(template.content);
    setShowTemplateModal(false);
    toast.success(`"${template.title}" ÌÖúÌîåÎ¶øÏù¥ Ï†ÅÏö©ÎêòÏóàÏäµÎãàÎã§.`, { position: 'top-center'});
  };

  // ÎßûÏ∂§Î≤ï ÏàòÏ†ï Ï†ÅÏö©
  const handleApplySpellFix = (original: string, suggestion: string) => {
    if (editorRef.current) {
      const currentContent = editorRef.current.getHTML?.() || postContent;
      console.log('üîß ÎßûÏ∂§Î≤ï ÏàòÏ†ï Ï†ÅÏö©:', { original, suggestion, currentContent: currentContent.substring(0, 100) });

      // Ï†ïÍ∑úÏãù ÌäπÏàòÎ¨∏Ïûê Ïù¥Ïä§ÏºÄÏù¥ÌîÑ
      const escapedOriginal = original.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
      const updatedContent = currentContent.replace(new RegExp(escapedOriginal, 'g'), suggestion);

      console.log('‚úÖ ÏàòÏ†ïÎêú ÎÇ¥Ïö©:', updatedContent.substring(0, 100));

      // ÏóêÎîîÌÑ∞ ÎÇ¥Ïö© ÏóÖÎç∞Ïù¥Ìä∏
      setPostContent(updatedContent);

      // ÏóêÎîîÌÑ∞Ïóê ÏßÅÏ†ë ÏÑ§Ï†ï (chain ÏÇ¨Ïö©)
      if (editorRef.current.chain) {
        const chain = editorRef.current.chain();
        if (chain && typeof chain === 'object' && 'focus' in chain) {
          (chain as any).focus().setContent(updatedContent).run();
        }
      }

      toast.success(`"${original}" ‚Üí "${suggestion}" ÏàòÏ†ï ÏôÑÎ£å!`);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100">
      <Toaster position="top-right" />
      <style dangerouslySetInnerHTML={{__html: `
        [data-sonner-toast][data-type="info"] {
          background: white !important;
          color: #3b82f6 !important;
          border: 2px solid #3b82f6 !important;
        }
        [data-sonner-toast][data-type="info"] [data-icon] {
          color: #3b82f6 !important;
        }
      `}} />
      
      {/* Header */}
      <header className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Link
              href="/"
              className="flex items-center gap-2 text-gray-600 hover:text-gray-900 transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
              Î©îÏù∏ÏúºÎ°ú
            </Link>
            <div className="h-6 w-px bg-gray-300" />
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center">
                <PenTool className="w-6 h-6 text-white" />
              </div>
              <div>
                <h1 className="text-xl font-bold text-gray-900">
                  {currentPostId ? 'Ìè¨Ïä§Ìä∏ ÏàòÏ†ï' : 'ÏÉà Í∏ÄÏì∞Í∏∞'}
                </h1>
                <p className="text-sm text-gray-500">
                  {currentPostId ? `Ìè¨Ïä§Ìä∏ ID: ${currentPostId}` : 'ÏÉàÎ°úÏö¥ Ìè¨Ïä§Ìä∏Î•º ÏûëÏÑ±ÌïòÏÑ∏Ïöî'}
                </p>
              </div>
            </div>
            {isLoading && (
              <div className="flex items-center gap-2 text-blue-600">
                <Loader2 className="w-4 h-4 animate-spin" />
                Î°úÎî© Ï§ë...
              </div>
            )}
          </div>
          
          <div className="flex items-center gap-3">
            {/* AI ÌôúÏÑ±Ìôî ÌëúÏãú - Ï£ºÏÑù Ï≤òÎ¶¨ */}
            {/*
            <div className="flex items-center gap-1 bg-green-100 text-green-800 px-2 py-1 rounded text-xs">
              <Sparkles className="w-3 h-3" />
              AI ÌôúÏÑ±Ìôî
            </div>
            */}
            <button
              className="px-3 py-1 border rounded text-sm hover:bg-gray-50"
              onClick={handleOpenTemplateModal}
            >
              <FileText className="w-4 h-4 inline mr-1" />
              ÌÖúÌîåÎ¶ø Í∞ÄÏ†∏Ïò§Í∏∞
            </button>
            <button
              className="px-3 py-1 border rounded text-sm hover:bg-gray-50"
              onClick={() => setShowSpellCheck(!showSpellCheck)}
            >
              <FileText className="w-4 h-4 inline mr-1" />
              ÎßûÏ∂§Î≤ï Í≤ÄÏÇ¨
            </button>
            <button
              className="px-3 py-1 border rounded text-sm"
              onClick={() => {
                if (!isPreview) {
                  // ÎØ∏Î¶¨Î≥¥Í∏∞Î°ú Ï†ÑÌôòÌïòÍ∏∞ Ï†ÑÏóê ÏóêÎîîÌÑ∞ ÎÇ¥Ïö© Ï†ÄÏû•
                  const editorContent = editorRef.current?.getHTML?.();
                  if (editorContent) {
                    setPostContent(editorContent);
                  }
                }
                setIsPreview(!isPreview);
              }}
            >
              <Eye className="w-4 h-4 inline mr-1" />
              {isPreview ? 'Ìé∏Ïßë' : 'ÎØ∏Î¶¨Î≥¥Í∏∞'}
            </button>
            <button
              className="px-3 py-1 border border-gray-300 text-gray-700 rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50"
              onClick={handleSaveAsDraft}
              disabled={isSaving || isPublishing}
            >
              {isSaving ? (
                <>
                  <Loader2 className="w-4 h-4 inline mr-1 animate-spin" />
                  Ï†ÄÏû• Ï§ë...
                </>
              ) : (
                <>
                  <Save className="w-4 h-4 inline mr-1" />
                  Ï†ÄÏû•
                </>
              )}
            </button>
            <button
              className="px-3 py-1 bg-blue-600 text-white rounded text-sm disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-700"
              onClick={handlePublish}
              disabled={isPublishing || isSaving}
            >
              {isPublishing ? (
                <>
                  <Loader2 className="w-4 h-4 inline mr-1 animate-spin" />
                  Î∞úÌñâ Ï§ë...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 inline mr-1" />
                  Î∞úÌñâ
                </>
              )}
            </button>
          </div>
        </div>
      </header>

      <div className="max-w-7xl mx-auto p-6">
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Î©îÏù∏ ÏóêÎîîÌÑ∞ */}
          <div className="lg:col-span-3">
            <div className="bg-white rounded-lg border">
              <div className="p-6 border-b">
                <input
                  type="text"
                  placeholder="Î©ãÏßÑ Ìè¨Ïä§Ìä∏ Ï†úÎ™©ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî..."
                  value={postTitle}
                  onChange={(e) => setPostTitle(e.target.value)}
                  className="w-full text-xl font-semibold border-none outline-none"
                />
                <div className="flex items-center gap-2 text-sm text-gray-500 mt-2">
                  <span>
                    Î∏îÎ°úÍ∑∏: {
                      selectedBlog === 'axi' ? 'AXI (Ìà¨Ïûê Ï†ÑÎ¨∏)' :
                      selectedBlog === 'orbisLanding' ? 'Orbis Landing (Î©îÏù∏)' :
                      'ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏùå'
                    }
                  </span>
                  <span>‚Ä¢</span>
                  <span>Ïπ¥ÌÖåÍ≥†Î¶¨: {category}</span>
                </div>
              </div>

              <div className={isPreview ? 'preview-mode' : ''}>
                <AdvancedNovelEditor
                  initialContent={postContent}
                  onSave={handleSave}
                  blogId="demo-blog"
                  selectedBlog={selectedBlog}
                  availableBlogs={availableBlogs}
                  onBlogChange={setSelectedBlog}
                  getDesignSettings={getBlogSettings}
                  onSetFeatured={handleSetFeatured}
                  featuredImage={featuredImage}
                  ref={editorRef}
                />
              </div>
              <style jsx>{`
                :global(.ProseMirror) {
                  max-height: 60vh;
                  overflow-y: auto;
                }
                .preview-mode :global(.ProseMirror) {
                  pointer-events: none;
                  user-select: text;
                }
                .preview-mode :global(.border-b.p-2.flex.items-center),
                .preview-mode :global(div[class*="flex items-center justify-between"]),
                .preview-mode :global(.image-toolbar-panel),
                .preview-mode :global(.table-editor-panel),
                .preview-mode :global(.blockquote-toolbar-panel),
                .preview-mode :global(.divider-toolbar-portal),
                .preview-mode :global(.ai-dropdown-container),
                .preview-mode :global(div[class*="mt-4 p-4"]:has(h4)),
                .preview-mode :global(div[class*="mt-4 p-3"]:has(strong)) {
                  display: none !important;
                }
              `}</style>
            </div>
          </div>

          {/* ÏÇ¨Ïù¥ÎìúÎ∞î */}
          <div className="space-y-6">
            
            {/* Î∞úÌñâ ÏÑ§Ï†ï */}
            <div className="bg-white rounded-lg border p-4">
              <h3 className="font-semibold mb-4">Î∞úÌñâ ÏÑ§Ï†ï</h3>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">Î∏îÎ°úÍ∑∏ ÏÑ†ÌÉù</label>
                  <select
                    className="w-full px-3 py-2 border rounded"
                    value={selectedBlog}
                    onChange={(e) => setSelectedBlog(e.target.value)}
                    disabled={availableBlogs.length === 0}
                  >
                    {availableBlogs.length === 0 ? (
                      <option value="">Î∏îÎ°úÍ∑∏ Î°úÎî© Ï§ë...</option>
                    ) : (
                      <>
                        <option value="">Î∏îÎ°úÍ∑∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                        {availableBlogs.map((blog) => (
                          <option key={blog.blogId} value={blog.blogId}>
                            {blog.displayName}
                          </option>
                        ))}
                      </>
                    )}
                  </select>
                  <p className="text-xs text-gray-500 mt-1">
                    ÏÑ†ÌÉùÌïú Î∏îÎ°úÍ∑∏Ïóê Ìè¨Ïä§Ìä∏Í∞Ä Ï†ÄÏû•Îê©ÎãàÎã§
                  </p>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">Ïπ¥ÌÖåÍ≥†Î¶¨</label>
                  <select
                    className="w-full px-3 py-2 border rounded"
                    value={category}
                    onChange={(e) => setCategory(e.target.value)}
                    disabled={!selectedBlog || availableCategories.length === 0}
                  >
                    {!selectedBlog ? (
                      <option value="">Î®ºÏ†Ä Î∏îÎ°úÍ∑∏Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                    ) : availableCategories.length === 0 ? (
                      <option value="">Ïπ¥ÌÖåÍ≥†Î¶¨ Î°úÎî© Ï§ë...</option>
                    ) : (
                      <>
                        <option value="">Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî</option>
                        {availableCategories.map((cat) => (
                          <option key={cat} value={cat}>
                            {cat}
                          </option>
                        ))}
                      </>
                    )}
                  </select>
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">ÌÉúÍ∑∏</label>
                  <input
                    type="text"
                    placeholder="ÌÉúÍ∑∏Î•º ÏûÖÎ†•ÌïòÏÑ∏Ïöî (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)"
                    className="w-full px-3 py-2 border rounded"
                    value={tags}
                    onChange={(e) => setTags(e.target.value)}
                  />
                </div>
              </div>
            </div>

            {/* ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄ */}
            <div className="bg-white rounded-lg border p-4">
              <h3 className="font-semibold mb-4 flex items-center gap-2">
                ‚≠ê ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄ
              </h3>
              {featuredImage ? (
                <>
                  <div className="relative">
                    <img
                      src={featuredImage}
                      alt="Featured"
                      className="w-full h-auto rounded-lg border border-gray-200"
                    />
                    <button
                      onClick={() => {
                        setFeaturedImage('');
                        toast.success('ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÍ∞Ä Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§.');
                      }}
                      className="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors shadow-lg"
                      title="ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄ Ìï¥Ï†ú"
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Î≥∏Î¨∏ÏóêÏÑú Ïù¥ÎØ∏ÏßÄÎ•º ÌÅ¥Î¶≠ÌïòÏó¨ ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÎ•º Î≥ÄÍ≤ΩÌï† Ïàò ÏûàÏäµÎãàÎã§.
                  </p>
                </>
              ) : (
                <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center">
                  <ImageIcon className="w-12 h-12 text-gray-400 mx-auto mb-3" />
                  <p className="text-sm text-gray-600 mb-1 font-medium">
                    ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§
                  </p>
                  <p className="text-xs text-gray-500">
                    Î≥∏Î¨∏ÏóêÏÑú Ïù¥ÎØ∏ÏßÄÎ•º ÌÅ¥Î¶≠ÌïòÏó¨ ÌÉÄÏù¥ÌãÄ Ïù¥ÎØ∏ÏßÄÎ°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî
                  </p>
                </div>
              )}
            </div>

            {/* SEO ÏÑ§Ï†ï */}
            <div className="bg-white rounded-lg border p-4">
              <h3 className="font-semibold mb-2">SEO ÏÑ§Ï†ï</h3>
              <p className="text-sm text-gray-500 mb-4">
                Í≤ÄÏÉâÏóîÏßÑ ÏµúÏ†ÅÌôîÎ•º ÏúÑÌïú Î©îÌÉÄÎç∞Ïù¥ÌÑ∞
              </p>
              <div className="space-y-4">
                <div>
                  <label className="text-sm font-medium mb-2 block">Î©îÌÉÄ Ï†úÎ™©</label>
                  <input 
                    type="text"
                    placeholder="Í≤ÄÏÉâ Í≤∞Í≥ºÏóê ÌëúÏãúÎê† Ï†úÎ™©" 
                    className="w-full px-3 py-2 border rounded"
                    value={metaTitle}
                    onChange={(e) => setMetaTitle(e.target.value)}
                  />
                </div>
                
                <div>
                  <label className="text-sm font-medium mb-2 block">Î©îÌÉÄ ÏÑ§Î™Ö</label>
                  <textarea 
                    className="w-full px-3 py-2 border rounded resize-none"
                    rows={3}
                    placeholder="Í≤ÄÏÉâ Í≤∞Í≥ºÏóê ÌëúÏãúÎê† ÏÑ§Î™Ö (160Ïûê Ïù¥Ìïò)"
                    value={metaDescription}
                    onChange={(e) => setMetaDescription(e.target.value)}
                  />
                </div>

                <div>
                  <label className="text-sm font-medium mb-2 block">ÌÇ§ÏõåÎìú</label>
                  <input 
                    type="text"
                    placeholder="Í≤ÄÏÉâ ÌÇ§ÏõåÎìú (ÏâºÌëúÎ°ú Íµ¨Î∂Ñ)" 
                    className="w-full px-3 py-2 border rounded"
                    value={keywords}
                    onChange={(e) => setKeywords(e.target.value)}
                  />
                </div>
              </div>
            </div>

          </div>
        </div>
      </div>

      {/* ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù Î™®Îã¨ */}
      {showTemplateModal && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg w-full max-w-2xl max-h-[80vh] flex flex-col">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">ÌÖúÌîåÎ¶ø ÏÑ†ÌÉù</h3>
              <button
                onClick={() => setShowTemplateModal(false)}
                className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
              >
                <X className="w-5 h-5" />
              </button>
            </div>

            <div className="flex-1 overflow-y-auto p-4">
              {isLoadingTemplates ? (
                <div className="flex items-center justify-center py-12">
                  <Loader2 className="w-8 h-8 text-blue-600 animate-spin" />
                </div>
              ) : availableTemplates.length === 0 ? (
                <div className="text-center py-12">
                  <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                  <h3 className="text-lg font-semibold text-gray-900 mb-2">
                    ÌÖúÌîåÎ¶øÏù¥ ÏóÜÏäµÎãàÎã§
                  </h3>
                  <p className="text-gray-600 mb-4">
                    ÌîÑÎ°úÌïÑ ÌéòÏù¥ÏßÄÏóêÏÑú ÌÖúÌîåÎ¶øÏùÑ Î®ºÏ†Ä ÏÉùÏÑ±Ìï¥Ï£ºÏÑ∏Ïöî
                  </p>
                  <Link
                    href="/profile?tab=templates"
                    className="inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    onClick={() => setShowTemplateModal(false)}
                  >
                    ÌÖúÌîåÎ¶ø Í¥ÄÎ¶¨Î°ú Ïù¥Îèô
                  </Link>
                </div>
              ) : (
                <div className="space-y-2">
                  {availableTemplates.map((template) => (
                    <button
                      key={template.id}
                      onClick={() => handleApplyTemplate(template)}
                      className="w-full text-left p-4 border rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-colors"
                    >
                      <h4 className="font-semibold text-gray-900 mb-1">
                        {template.title}
                      </h4>
                      <p className="text-sm text-gray-500">
                        {template.createdAt?.toDate?.().toLocaleDateString('ko-KR') || ''}
                      </p>
                    </button>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Î∞úÌñâÎêú Ìè¨Ïä§Ìä∏ ÎØ∏Î¶¨Î≥¥Í∏∞ Î™®Îã¨ */}
      {showPublishedPreview && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg w-full max-w-6xl h-[90vh] flex flex-col">
            <div className="flex items-center justify-between p-4 border-b">
              <h3 className="text-lg font-semibold">Î∞úÌñâ Ìè¨Ïä§Ìä∏ ÌôïÏù∏</h3>
              <div className="flex items-center gap-2">
                <a
                  href={publishedPostUrl}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="px-3 py-1.5 text-sm text-blue-600 hover:text-blue-700 border border-blue-600 rounded-lg hover:bg-blue-50 transition-colors"
                >
                  axi ÌéòÏù¥ÏßÄ
                </a>
                <Link
                  href={`/manage/${currentPostId}?blog=${selectedBlog}&category=${category}`}
                  className="px-3 py-1.5 text-sm text-green-600 hover:text-green-700 border border-green-600 rounded-lg hover:bg-green-50 transition-colors"
                >
                  Í¥ÄÎ¶¨Ïûê ÌéòÏù¥ÏßÄ
                </Link>
                <button
                  onClick={() => {
                    setShowPublishedPreview(false);
                    // ÏóêÎîîÌÑ∞ ÎÇ¥Ïö© ÏÉàÎ°úÍ≥†Ïπ®
                    setPostTitle('');
                    setPostContent('');
                    setTags('');
                    setMetaTitle('');
                    setMetaDescription('');
                    setKeywords('');
                    setFeaturedImage('');
                    setCurrentPostId('');
                    // ÏóêÎîîÌÑ∞ Í∞ïÏ†ú Î¶¨Î†åÎçîÎßÅÏùÑ ÏúÑÌïú Î∞©Î≤ï
                    if (editorRef.current) {
                      editorRef.current.clearContent?.();
                    }
                  }}
                  className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            </div>
            <div className="flex-1 overflow-hidden">
              <iframe
                src={publishedPostUrl}
                className="w-full h-full border-0"
                title="Î∞úÌñâ Ìè¨Ïä§Ìä∏ ÌôïÏù∏"
              />
            </div>
          </div>
        </div>
      )}

      {/* Í∏∞Îä• ÏÜåÍ∞ú ÏÑπÏÖò - AI Í¥ÄÎ†® ÎÇ¥Ïö© ÏàòÏ†ï */}
      <div className="bg-white border-t border-gray-200 mt-12">
        <div className="max-w-7xl mx-auto px-6 py-12">
          <div className="text-center mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              ÏõåÎìúÌîÑÎ†àÏä§Î•º Îõ∞Ïñ¥ÎÑòÎäî Í∏∞Îä•Îì§
            </h2>
            <p className="text-gray-600">
              Novel EditorÎ°ú Íµ¨ÌòÑÎêú Ï∞®ÏÑ∏ÎåÄ Î∏îÎ°úÍ∑∏ CMS
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* AI ÏûêÎèôÏôÑÏÑ± ÏÑπÏÖò Ï£ºÏÑù Ï≤òÎ¶¨ Î∞è Îã§Î•∏ Í∏∞Îä•ÏúºÎ°ú ÎåÄÏ≤¥ */}
            <div className="bg-gray-50 rounded-lg p-6">
              <PenTool className="w-8 h-8 text-blue-600 mb-4" />
              <h3 className="text-lg font-semibold mb-2">Í≥†Í∏â ÏóêÎîîÌÑ∞</h3>
              <p className="text-gray-600 text-sm">
                TipTap Í∏∞Î∞òÏùò Í∞ïÎ†•Ìïú WYSIWYG ÏóêÎîîÌÑ∞Î°ú ÏûêÏú†Î°≠Í≤å ÏΩòÌÖêÏ∏†Î•º 
                ÏûëÏÑ±ÌïòÍ≥† Ìé∏ÏßëÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </p>
            </div>

            <div className="bg-gray-50 rounded-lg p-6">
              <ImageIcon className="w-8 h-8 text-green-600 mb-4" />
              <h3 className="text-lg font-semibold mb-2">ÏûêÏú†Î°úÏö¥ ÎØ∏ÎîîÏñ¥</h3>
              <p className="text-gray-600 text-sm">
                ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ÏúºÎ°ú Ïù¥ÎØ∏ÏßÄÎ•º Ï∂îÍ∞ÄÌïòÍ≥†, ÎßàÏö∞Ïä§Î°ú ÌÅ¨Í∏∞Î•º ÏûêÏú†Î°≠Í≤å 
                Ï°∞Ï†àÌï† Ïàò ÏûàÏäµÎãàÎã§.
              </p>
            </div>

            <div className="bg-gray-50 rounded-lg p-6">
              <Settings className="w-8 h-8 text-purple-600 mb-4" />
              <h3 className="text-lg font-semibold mb-2">ÏôÑÎ≤ΩÌïú SEO</h3>
              <p className="text-gray-600 text-sm">
                Î©îÌÉÄÌÉúÍ∑∏, Open Graph, Íµ¨Ï°∞ÌôîÎêú Îç∞Ïù¥ÌÑ∞ÍπåÏßÄ ÏûêÎèô ÏÉùÏÑ±ÎêòÏñ¥
                Í≤ÄÏÉâ ÎÖ∏Ï∂úÏù¥ Í∑πÎåÄÌôîÎê©ÎãàÎã§.
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* ÎßûÏ∂§Î≤ï Í≤ÄÏÇ¨ Ìå®ÎÑê */}
      <SpellCheckPanel
        isOpen={showSpellCheck}
        onClose={() => setShowSpellCheck(false)}
        getContent={() => editorRef.current?.getHTML?.() || postContent}
        onApplyFix={handleApplySpellFix}
      />
    </div>
  );
}

export default function WritePage() {
  return (
    <Suspense fallback={<div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 flex items-center justify-center">
      <div className="text-center">
        <div className="animate-spin w-8 h-8 border-2 border-blue-600 border-t-transparent rounded-full mx-auto mb-4"></div>
        <p className="text-gray-600">ÌéòÏù¥ÏßÄÎ•º Î∂àÎü¨Ïò§Îäî Ï§ë...</p>
      </div>
    </div>}>
      <WritePageContent />
    </Suspense>
  );
}